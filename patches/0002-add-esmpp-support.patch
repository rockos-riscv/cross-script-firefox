From 5cb9f7fe5b1d1a7074e038f08b9d35bbeecf88ca Mon Sep 17 00:00:00 2001
From: CHEN <chenxuan@iscas.ac.cn>
Date: Thu, 16 Oct 2025 09:53:43 +0000
Subject: [PATCH 02/12] add esmpp support

---
 .../platforms/ffmpeg/FFmpegVideoDecoder.cpp   | 131 +++++++++++++++++-
 .../platforms/ffmpeg/FFmpegVideoDecoder.h     |   5 +
 2 files changed, 135 insertions(+), 1 deletion(-)

diff --git a/dom/media/platforms/ffmpeg/FFmpegVideoDecoder.cpp b/dom/media/platforms/ffmpeg/FFmpegVideoDecoder.cpp
index 4f13e797ae..f9d4256aec 100644
--- a/dom/media/platforms/ffmpeg/FFmpegVideoDecoder.cpp
+++ b/dom/media/platforms/ffmpeg/FFmpegVideoDecoder.cpp
@@ -31,6 +31,11 @@
 #if LIBAVCODEC_VERSION_MAJOR >= 58
 #  include "mozilla/ProfilerMarkers.h"
 #endif
+#include <sys/mman.h>
+#include <unistd.h>
+#include <fcntl.h>
+#include <stdio.h>
+
 #ifdef MOZ_USE_HWDECODE
 #  include "H264.h"
 #  include "H265.h"
@@ -40,6 +45,7 @@
 #  include "mozilla/gfx/gfxVars.h"
 #  include "mozilla/layers/DMABUFSurfaceImage.h"
 #  include "va/va.h"
+#define ES_MPP 1
 #endif
 
 #if defined(MOZ_AV1) && \
@@ -61,6 +67,7 @@
 #  define AV_PIX_FMT_GBRP10LE PIX_FMT_GBRP10LE
 #  define AV_PIX_FMT_NONE PIX_FMT_NONE
 #  define AV_PIX_FMT_VAAPI_VLD PIX_FMT_VAAPI_VLD
+#  define AV_PIX_FMT_NV12 PIX_FMT_NV12
 #endif
 #if LIBAVCODEC_VERSION_MAJOR > 58
 #  define AV_PIX_FMT_VAAPI_VLD AV_PIX_FMT_VAAPI
@@ -183,6 +190,8 @@ static AVPixelFormat ChoosePixelFormat(AVCodecContext* aCodecContext,
       case AV_PIX_FMT_GBRP10LE:
         FFMPEGV_LOG("Requesting pixel format GBRP10LE.");
         return AV_PIX_FMT_GBRP10LE;
+      case AV_PIX_FMT_NV12:
+        return AV_PIX_FMT_NV12;
       default:
         break;
     }
@@ -225,6 +234,22 @@ static AVPixelFormat ChooseV4L2PixelFormat(AVCodecContext* aCodecContext,
   return AV_PIX_FMT_NONE;
 }
 
+static AVPixelFormat ChooseEsmppPixelFormat(AVCodecContext* aCodecContext,
+                                           const AVPixelFormat* aFormats) {
+  FFMPEGV_LOG("Choosing FFmpeg pixel format for esmpp video decoding.");
+  for (; *aFormats > -1; aFormats++) {
+    switch (*aFormats) {
+      case AV_PIX_FMT_DRM_PRIME:
+        FFMPEGV_LOG("Requesting pixel format DRM PRIME");
+        return AV_PIX_FMT_DRM_PRIME;
+      default:
+        break;
+    }
+  }
+  NS_WARNING("FFmpeg does not share any supported esmpp pixel formats.");
+  return AV_PIX_FMT_NONE;
+}
+
 static AVPixelFormat ChooseD3D11VAPixelFormat(AVCodecContext* aCodecContext,
                                               const AVPixelFormat* aFormats) {
 #  ifdef MOZ_ENABLE_D3D11VA
@@ -479,6 +504,55 @@ MediaResult FFmpegVideoDecoder<LIBAV_VER>::InitV4L2Decoder() {
   releaseDecoder.release();
   return NS_OK;
 }
+
+MediaResult FFmpegVideoDecoder<LIBAV_VER>::InitEsmppDecoder() {
+  FFMPEG_LOG("Initialising esmpp-DRM FFmpeg decoder");
+  StaticMutexAutoLock mon(sMutex);
+
+  // Select the appropriate esmpp codec
+  AVCodec* codec = nullptr;
+  switch (mCodecID) {
+    case AV_CODEC_ID_H264:
+      codec = mLib->avcodec_find_decoder_by_name("h264_esmppvdec");
+      break;
+    case AV_CODEC_ID_HEVC:
+      codec = mLib->avcodec_find_decoder_by_name("hevc_esmppvdec");
+      break;
+  }
+  if (!codec) {
+    return NS_ERROR_DOM_MEDIA_FATAL_ERR;
+  }
+
+  if (!(mCodecContext = mLib->avcodec_alloc_context3(codec))) {
+    return NS_ERROR_OUT_OF_MEMORY;
+  }
+  mCodecContext->opaque = this;
+
+  InitHWCodecContext(ContextType::ESMPP);
+
+  mCodecContext->apply_cropping = 0;
+
+  auto releaseDecoder = MakeScopeExit([&] {
+    if (mCodecContext) {
+      mLib->av_freep(&mCodecContext);
+    }
+  });
+
+  MediaResult ret = AllocateExtraData();
+  if (NS_FAILED(ret)) {
+    mLib->av_freep(&mCodecContext);
+    return ret;
+  }
+
+  if (mLib->avcodec_open2(mCodecContext, codec, nullptr) < 0) {
+    mLib->av_freep(&mCodecContext);
+    return NS_ERROR_DOM_MEDIA_FATAL_ERR;
+  }
+
+  mUsingEsmpp = true;
+  releaseDecoder.release();
+  return NS_OK;
+}
 #endif
 
 #if LIBAVCODEC_VERSION_MAJOR < 58
@@ -525,6 +599,7 @@ bool FFmpegVideoDecoder<LIBAV_VER>::ShouldDisableHWDecoding(
   switch (mCodecID) {
     case AV_CODEC_ID_H264:
       supported = gfx::gfxVars::UseH264HwDecode();
+      supported = true;
       break;
     case AV_CODEC_ID_VP8:
       supported = gfx::gfxVars::UseVP8HwDecode();
@@ -636,6 +711,12 @@ void FFmpegVideoDecoder<LIBAV_VER>::InitHWDecoderIfAllowed() {
   }
 #  endif  // MOZ_ENABLE_V4L2
 
+#  ifdef MOZ_ENABLE_ESMPP
+  if (NS_SUCCEEDED(InitEsmppDecoder())) {
+    return;
+  }
+#  endif  // MOZ_ENABLE_ESMPP
+
 #  ifdef MOZ_ENABLE_D3D11VA
   if (XRE_IsGPUProcess() && NS_SUCCEEDED(InitD3D11VADecoder())) {
     return;
@@ -1036,6 +1117,9 @@ void FFmpegVideoDecoder<LIBAV_VER>::InitHWCodecContext(ContextType aType) {
     case ContextType::MediaCodec:
       mCodecContext->get_format = ChooseMediaCodecPixelFormat;
       break;
+    case ContextType::ESMPP:
+      mCodecContext->get_format = ChooseEsmppPixelFormat;
+      break;
     default:
       break;
   }
@@ -1308,6 +1392,9 @@ MediaResult FFmpegVideoDecoder<LIBAV_VER>::DoDecode(
       if (mUsingV4L2) {
         rv = CreateImageV4L2(mFrame->pkt_pos, GetFramePts(mFrame),
                              Duration(mFrame), aResults);
+      } else if (mUsingEsmpp) {
+        rv = CreateImageEsmpp(mFrame->pkt_pos, GetFramePts(mFrame),
+                             Duration(mFrame), aResults);
       } else {
         rv = CreateImageVAAPI(mFrame->pkt_pos, GetFramePts(mFrame),
                               Duration(mFrame), aResults);
@@ -1870,6 +1957,48 @@ MediaResult FFmpegVideoDecoder<LIBAV_VER>::CreateImageV4L2(
   aResults.AppendElement(std::move(vp));
   return NS_OK;
 }
+
+MediaResult FFmpegVideoDecoder<LIBAV_VER>::CreateImageEsmpp(
+    int64_t aOffset, int64_t aPts, int64_t aDuration,
+    MediaDataDecoder::DecodedData& aResults) {
+  FFMPEG_LOG("Esmpp Got one frame output with pts=%" PRId64 " dts=%" PRId64
+             " duration=%" PRId64,
+             aPts, mFrame->pkt_dts, aDuration);
+
+  AVDRMFrameDescriptor* desc = (AVDRMFrameDescriptor*)mFrame->data[0];
+  if (!desc || desc->nb_layers < 1) {
+    return MediaResult(NS_ERROR_DOM_MEDIA_DECODE_ERR,
+                       RESULT_DETAIL("Missing DRM PRIME descriptor in frame"));
+  }
+
+  MOZ_ASSERT(mTaskQueue->IsOnCurrentThread());
+  if (!mVideoFramePool) {
+    mVideoFramePool = MakeUnique<VideoFramePool<LIBAV_VER>>(20);
+  }
+
+  auto surface = mVideoFramePool->GetVideoFrameSurface(
+      *desc, mFrame->width, mFrame->height, mCodecContext, mFrame, mLib);
+  if (!surface) {
+    return MediaResult(NS_ERROR_DOM_MEDIA_DECODE_ERR,
+                       RESULT_DETAIL("Esmpp dmabuf allocation error"));
+  }
+
+  surface->SetYUVColorSpace(GetFrameColorSpace());
+  surface->SetColorRange(GetFrameColorRange());
+
+  RefPtr<VideoData> vp = VideoData::CreateFromImage(
+      mInfo.mDisplay, aOffset, TimeUnit::FromMicroseconds(aPts),
+      TimeUnit::FromMicroseconds(aDuration), surface->GetAsImage(),
+      !!mFrame->key_frame, TimeUnit::FromMicroseconds(-1));
+
+  if (!vp) {
+    return MediaResult(NS_ERROR_DOM_MEDIA_DECODE_ERR,
+                       RESULT_DETAIL("Esmpp image creation error"));
+  }
+
+  aResults.AppendElement(std::move(vp));
+  return NS_OK;
+}
 #endif
 
 RefPtr<MediaDataDecoder::FlushPromise>
@@ -1956,7 +2085,7 @@ void FFmpegVideoDecoder<LIBAV_VER>::ProcessShutdown() {
 bool FFmpegVideoDecoder<LIBAV_VER>::IsHardwareAccelerated(
     nsACString& aFailureReason) const {
 #if defined(MOZ_USE_HWDECODE) && defined(MOZ_WIDGET_GTK)
-  return mUsingV4L2 || !!mVAAPIDeviceContext;
+  return mUsingEsmpp || mUsingV4L2 || !!mVAAPIDeviceContext;
 #elif defined(MOZ_ENABLE_D3D11VA)
   return !!mD3D11VADeviceContext;
 #elif defined(MOZ_WIDGET_ANDROID)
diff --git a/dom/media/platforms/ffmpeg/FFmpegVideoDecoder.h b/dom/media/platforms/ffmpeg/FFmpegVideoDecoder.h
index 8a407f8c18..2aec0ac0b4 100644
--- a/dom/media/platforms/ffmpeg/FFmpegVideoDecoder.h
+++ b/dom/media/platforms/ffmpeg/FFmpegVideoDecoder.h
@@ -174,6 +174,7 @@ class FFmpegVideoDecoder<LIBAV_VER>
     MediaCodec,  // Android
     VAAPI,       // Linux Desktop
     V4L2,        // Linux embedded
+    ESMPP,       // Eswin ESMPP
   };
   void InitHWCodecContext(ContextType aType);
 
@@ -213,6 +214,7 @@ class FFmpegVideoDecoder<LIBAV_VER>
   bool IsLinuxHDR() const;
   MediaResult InitVAAPIDecoder();
   MediaResult InitV4L2Decoder();
+  MediaResult InitEsmppDecoder();
   bool CreateVAAPIDeviceContext();
   bool GetVAAPISurfaceDescriptor(VADRMPRIMESurfaceDescriptor* aVaDesc);
   void AddAcceleratedFormats(nsTArray<AVCodecID>& aCodecList,
@@ -224,10 +226,13 @@ class FFmpegVideoDecoder<LIBAV_VER>
                                MediaDataDecoder::DecodedData& aResults);
   MediaResult CreateImageV4L2(int64_t aOffset, int64_t aPts, int64_t aDuration,
                               MediaDataDecoder::DecodedData& aResults);
+  MediaResult CreateImageEsmpp(int64_t aOffset, int64_t aPts, int64_t aDuration,
+                              MediaDataDecoder::DecodedData& aResults);
   void AdjustHWDecodeLogging();
 
   AVBufferRef* mVAAPIDeviceContext = nullptr;
   bool mUsingV4L2 = false;
+  bool mUsingEsmpp = false;
   // If video overlay is used we want to upload SW decoded frames to
   // DMABuf and present it as a external texture to rendering pipeline.
   bool mUploadSWDecodeToDMABuf = false;
-- 
2.48.1

